1. Prerequirement

1.1 Python 3.7 & poetry & uvicorn
- install python 3.7 & poetry, uvicorn on your PC
# pip install poetry
# pip install uvicorn

- install dependencies
# poetry install

1.2 Configuration files
- copy all JSON files on your root directory

neo-chatbot-f0fff-service_account_keys.json
neo-chatbot-firebase.json
oauth2-credentials.json

1.3 Prepare test gmail account 
- google cloud console
go to google cloud -> choose 'structure-llm' -> OAuth consent screen

https://console.cloud.google.com/apis/credentials/consent?project=chat-automation-387710

- add Test user 
in OAuth consent screen, please add test user
xxxx@gmail.com

1.4 Launch project
- in root directory, run the following command
# uvicorn main:app --host 0.0.0.0 --port 8000 --reload

1.5 Check Swagger UI screen
- go to the link; http://localhost:8000/docs
- check the swagger documentation screen.

2. Test Endpoints

2.1 User authentication
This project is based on Firebase email/password authentication.

- Test user
test@gmail.com / testtest

- Authorize
To check the user authenticated protected endpoints, you first click 'Authorize' button and then input test user credentials

2.2 User management
- /users/signup
This endpoint will create user account on Firebase

- /users/token
This endpoint is for user login

- /users/me
This endpoint is for getting user information

2.3 Provider management
After user authentication, the user can link their social accounts for chatbot such as gmail, linkedin and etc.
Here we called those as 'provider'

- /providers/google_auth
This endpoint is the redirect_url which can be registered in google cloud for google user authentication
***For other providers, there will be more endpoints for redirect_url in future

- /providers/link_provider
This endpoint attach the user's social accounts to him.
For example, if we call this function with "gmailprovider" parameter, it will ask gmail authentication.
After done, the user will get the access_token and then use it for chatbot feature later
***In swagger documentation, this endpoint not working, because it will go to the redirect_url on the page
so to check this api, you can input the following link in other chrome tab.
http://localhost:8000/providers/link_social_provider?provider_name=gmailprovider
after call there, you have to authenticate your test gmail account and get the access_token on the screen
***In production mode, this endpoint is user authentication protected, but now it is free for checking

- /providers/update_provider_info
This endpoint updates the user's provider information
In above endpoint, after we authenticate the gmail account, and get the access_token and extra.
You can save these information via this endpoint.
In above endpoint, you can get the JSON format response, and then extract 'data' field from it, and then input it as 'social_info' field
The following is the sample
{
    "access_token": "ya29.a0AWY7CkmkohVymfu7QM6SOrfC8M37dM93tyt8yXCopIUt91jcYiSyXGro6e5Ef1wESybfX0sROUXVKy9Bw1WBY4R-OHkdeQP9kSykl9f1n6ROXh6sl-CRlx_hiKXkdu_VIX72nvigoZtr1t_LBTyvJPY9aPKtaCgYKAZkSARESFQG1tDrp8YLd0OH53WWjCwH5zUplsQ0163",
    "expires_in": 3599,
    .......
    "iat": 1685200150,
    "exp": 1685203750,
    "userinfo": {.....}
}

This information will be used for auto-chatbot feature

- /providers/get_last_message
This endpoint will get the latest message from provider.
For example, if we choose provider_name as 'gmailprovider', it will get the last message from someone in gmail account.
Here we have to use access_token from which we get the above /providers/link_provider endpoint

- /providers/get_messages
This endpoint will get the messages from sepcific time 
here from_when parameter is the unix timestamp for specific time.
For example, if we choose provider_name as 'gmailprovider', and then specify the timestamp for from_when

- /providers/reply_to_message
This endpoint will reply to specific message via provider
Here 'to' parameter will indicates the message for various providers
For example, if we choose provider_name as 'gmailprovider', 'to' parameter will be the 'messageId' of gmail.
In other social platform, it can be varied by following their definitions

- /providers/unlink_provider
This endpoint detach the user's social account from him.


2.4 Services
These are endpoints for LLM Services

- /services/register_ai_service
Via this endpoint, we will register LLM ai services's api endpoint
Here 'endpoint' field is the LLM server's url for generating response from message

- /services/get_ai_service
This endpoint will get the response from AI service.


2.5 Bot management
- /users/start_auto_bot
This function will turn on the auto-bot for user
here 'inteval_seconds' means the time interval

- /users/stop_auto_bot
This function will turn off the auto-bot feature for user

- /users/status_auto_bot
this function will get the status of current bot






